#define _CRT_SECURE_NO_DEPRECATE
#define _CRT_SECURE_NO_WARNINGS
#pragma warning(disable:4996)

#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <memory.h>

#include<sys/types.h>
#include<sys/stat.h>
#include<fcntl.h> 




typedef struct WAV_RIFF {
	/* chunk "riff" */
	char ChunkID[4];   /* "RIFF" */
	/* sub-chunk-size */
	uint32_t ChunkSize; /* 36 + Subchunk2Size */
	/* sub-chunk-data */
	char Format[4];    /* "WAVE" */
} RIFF_t;

typedef struct WAV_FMT {
	/* sub-chunk "fmt" */
	char Subchunk1ID[4];   /* "fmt " */
	/* sub-chunk-size */
	uint32_t Subchunk1Size; /* 16 for PCM */
	/* sub-chunk-data */
	uint16_t AudioFormat;   /* PCM = 1*/
	uint16_t NumChannels;   /* Mono = 1, Stereo = 2, etc. */
	uint32_t SampleRate;    /* 8000, 44100, etc. */
	uint32_t ByteRate;  /* = SampleRate * NumChannels * BitsPerSample/8 */
	uint16_t BlockAlign;    /* = NumChannels * BitsPerSample/8 */
	uint16_t BitsPerSample; /* 8bits, 16bits, etc. */
} FMT_t;

typedef struct WAV_list {
	/* sub-chunk "data" */
	char Subchunk11ID[4];   /* "data" */
	/* sub-chunk-size */
	uint32_t Subchunk11Size; /* data size */
	/* sub-chunk-data */
//    Data_block_t block;
} Info_t;


typedef struct WAV_info {
	/* sub-chunk "data" */
	char Subchunk12ID[4];   /* "data" */
	/* sub-chunk-size */
	uint32_t Subchunk12Size; /* data size */
	/* sub-chunk-data */
//    Data_block_t block;
} List_t;


typedef struct WAV_data {
	char tmp[18];
	/* sub-chunk "data" */
	char Subchunk2ID[4];   /* "data"    1-第74位*/
	/* sub-chunk-size */
	char str[4];
	uint32_t Subchunk2Size; /* data size */
	//char str[4];
	/* sub-chunk-data */
//    Data_block_t block;
} Data_t;

typedef struct WAV_fotmat {
	RIFF_t riff;   //头 
	FMT_t fmt;     //重要信息 
	List_t list;
	Info_t info;
	Data_t data;  //数据块 
} Wav;


int CombineWaveFile(int argc, char argv[][256],const char * pOutFileName)
{
	printf("i am CombineWaveFile, begin to work\r\n");
	if (argc <= 0 || 0 == strlen(pOutFileName))
	{
		return 1;
	}

	FILE* fp = NULL;
	char strTemp[1024 * 1024] = { 0 };

	Wav NEW;
	memset((void*)&NEW, 0, sizeof(Wav));

	Wav wav[10];

	printf("sizeof(Wav) = %d\n", sizeof(Wav));

	int i, sum = 0;
	for (i = 0; i < argc; i++)
	{
		memset((void*)&wav[i], 0, sizeof(Wav));

		fp = fopen(argv[i], "rb");
		if (NULL == fp)
		{
			printf("can't open audio file\n");
			fclose(fp);
			exit(1);
		}
		printf("2222\r\n");

		int nRead = fread(&wav[i], 1, sizeof(Wav), fp);
		if (nRead < 0)
		{
			printf("read err \r\n");
			exit(1);
		}
		memcpy(&NEW, &wav[0], sizeof(Wav));

		sum += (wav[i].riff.ChunkSize - 80);
		NEW.riff.ChunkSize = sum + 80;
		unsigned int ltmp = 0, k;
		unsigned char* p = (unsigned char*)&wav[i].data.Subchunk2ID[0];
		ltmp = *(unsigned int*)&p[4];
		printf("dataChunkID \t%c%c%c%c\n", wav[i].data.Subchunk2ID[0], wav[i].data.
			Subchunk2ID[1], wav[i].data.Subchunk2ID[2], wav[i].data.Subchunk2ID[3]);

		printf("dataSTRR = \t%x%x%x%x\n", wav[i].data.str[0], wav[i].data.str[1], wav[i].data.str[2], wav[i].data.str[3]);
		printf("dataSize \t%d,ltmp=%x:%d\n", wav[i].data.Subchunk2Size, ltmp, ltmp);
		printf(" test：\r\n");
		for (k = 0; k < 10; k++)
			printf("p[%d]=%x,", k, p[k]);
		printf(" \r\n");

		printf("headSize \t%d\n", wav[i].riff.ChunkSize);

		fclose(fp);
	}
	printf("NEW.riff.ChunkSize = %d\n\n", NEW.riff.ChunkSize);
	/******************************/
	FILE* pOutFile = fopen(pOutFileName, "wb");
	fwrite(&NEW, 1, sizeof(Wav), pOutFile);

	for (i = 0; i < argc; i++)
	{
		memset((void*)&wav[i], 0, sizeof(Wav));

		FILE* fd = fopen(argv[i], "rb");
		if (NULL == fp)
		{
			printf("can't open audio file\n");
			exit(1);
		}
		printf("aaaaaaaaaaaaaaaaaaa\r\n");

		int nRead = fread(&wav[i], 1, sizeof(Wav), fd);
		if (nRead < 0)
		{
			printf("read err \r\n");
			exit(1);
		}

		//读取后面的数据位 
		int fret = fseek(fd, nRead, SEEK_SET);
		if (0 != fret)
		{
			printf("fseek err\n\n");
			exit(1);
		}

		nRead = fread(strTemp, 1, sizeof(strTemp) - 1, fd);
		//printf("nRead__88888 = %d\n\n",nRead);
		if (0 != nRead)
		{
			//printf("nRead_____ = %d\n\n",nRead);
			fwrite(strTemp, 1, (wav[i].riff.ChunkSize - 80), pOutFile);
			nRead = fread(strTemp, 1, sizeof(strTemp) - 1, fd);
		}
		printf("---------------\n");
	}
	return 0;
}

//printf("fmtChunkID \t%c%c%c%c\n", wav[i].fmt.Subchunk1ID[0],wav[i].fmt.
//Subchunk1ID[1], wav[i].fmt.Subchunk1ID[2], wav[i].fmt.Subchunk1ID[3]);
//printf("dataChunkID \t%c%c%c%c\n", wav[i].data.Subchunk2ID[0], wav[i].data.
//Subchunk2ID[1], wav[i].data.Subchunk2ID[2], wav[i].data.Subchunk2ID[3]);


int  main()
{
	char strFile[5][256];
	memset(strFile[0], 0, 256);
	sprintf(strFile[0], "C:\\Users\\idata\\Desktop\\voice\\sdms2.wav");
	sprintf(strFile[1], "C:\\Users\\idata\\Desktop\\voice\\sdms3.wav");
	//(strFile[2], "C:\\Users\\idata\\Desktop\\man_setOK.wav");
	CombineWaveFile(2, strFile, "C:\\Users\\idata\\Desktop\\voice\\out.wav");

	printf("i am ok\r\n");

	return 0;
}
